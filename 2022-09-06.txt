Go에서 makefile의 역할
Go build, run, test 등의 작업을 간편하게한다.
일종의 build와 link에 대한 script와 같다.

Makefile : Go 애플리케이션뿐만 아니라 대부분의 프로그래밍 언어를 실행하고 구축하는 데 사용할 수 있는 매우 유용한 자동화 도구
일반적으로 MakefilesGithub 및 Gitlab에서 다양한 Go 애플리케이션의 전체 호스트의 루트 디렉토리에서 볼 수 있다.
이러한 애플리케이션의 유지 관리자가 자주 수행하는 작업 자동화를 위한 선택 도구로 광범위하게 사용되기 때문이다.

Hikari CP와 DBConnection Pool
데이터 연동 과정에서 일반적인 연동과정 : 필요시마다 DB에 연결하여 작업
단점 : DB연결에 시간이 많이 걸린다.
해결 방법 : WAS가 실행됨과 동시에 DB와 연결을 미리 설정해두고, 필요시마다 미리 연결해놓은 상태를 이용해 빠르게 DB와 연동하여 작업한다. 이 작업이 Connection Pool이다.
유의점 : DB에서는 기본적으로 Connection을 일정량 제공하는데 유저수가 많아져서 커넥션이 모자랄 경우 과부화가 일어난다. 유저수에 따라 Connection을 조절해야한다.

Hikari CP : 가벼운 용량과 빠른속도가 장점인 JDBC의 CP 프레임워크.
DBCP를 관리한다. DBCP를 관리하는 이유는 JDBC(Java Database Connectivity) 커넥션을 연결하는 것은 복잡하기때문에. 그리고 자원을 많이 소모하는 작업이기 때문에 성능향상을 위해 관리한다.

Spring MVC Request flow
1. DispatcherServlet에서 Client로부터 온 모든 request를 받는다.
2. DispatcherServlet은 HandlerMapping에게 '적절한 controller를 선택하는 일'을 요청한다.
3. HandlerMapping은 적절한 Controller를 선택하여 이를 DispatcherServlet에 반환한다.
4. DispatcherServlet은 선택된 Controller의 비지니스 로직 실행작업을 HandlerAdapter에게 위임한다.
5. HandlerAdapter는 Controller의 비지니스 로직을 호출하고 결과를 ModelAndView 객체에 담아서 DispatcherServlet에 return한다.
6. DispatcherServlet은 ViewResolver에게 결과를 보여줄 view를 요청하고 반환받는다.
7. DispatcherServlet은 View 객체에게 응답결과 생성을 요청한다.

Servlet이란
DynamicWebPage를 만들때 사용되는 자바기반의 웹앱 프로그래밍 기술
Web의 request&response의 흐름을 간단한 Method 호출만으로 체계적으로 다룰수있게해주는기술
특징 : Client의 request에 대해 동적으로 작동하는 웹 애플리케이션 컴포넌트
HTML을 사용하여 Response한다
JAVA의 쓰레드를 이용하여 동작한다.
MVC패턴에서 Controller로 이용된다.(DispatcherServlet)
HTTP 프로토콜 서비스를 지원하는 javax.servlet.http.HttpServlet 클래스를 상속받는다.

Servlet컨테이너란
Servlet을 담고 관리해주는 컨테이너. 구현되어있는(Compiled) servlet 클래스의 규칙에 맞게 servlet을 관리하며 Client로부터 요청이 오면
HttpServletRequest, HttpServletResponse 두 객체를 생성하며 HttpMethod에 따라 동적인 페이지를 생성하여 응답을 보낸다.
HttpServletRequest : http프로토콜의 request정보를 servlet에 전달하기 위한 목적으로 사용되는 객체.
Header, Parameter, Cookie, URI, URL등의 정보를 읽어 들이는 Method와 Body의 Stream을 읽어들이는 메서드를 가지고있다.
HttpServletResponse : 요청을 보낸 Client에게 응답을 보내기 위한 객체.
Content type, responseCode, responseMessage등을 전송할수있는 Method를 가지고있다.

Servlet 컨테이너의 주요 기능
1. 생명주기 관리
servlet의 생명주기를 관리. servlet컨테이너가 기동되는 순간 servletClass 를 인스턴스화 하고, 초기화 메소드를 호출하고,
request가 오면 적절한 servletMethod를 찾아서 동작하고, servlet의 생명이 다하는 순간 가비지 컬렉션을 통해 메모리에서 제거.
2. 통신 지원
Client의 Request를 받고 Response를 보낼수있게 웹서버와 소켓을만들어서 통신을 해준다.
Servlet컨테이너는 socket을 만들고 listen, accept등의 기능을 API로 제공하여 복잡한 과정을 생략할 수 있게 해주고 개발자로서 비즈니스 로직에 더욱 집중할수있게 만들어준다.
3. 멀티스레딩 관리
Servlet 컨테이너는 해당 Servlet의 request가 들어오면 thread를 생성해서 작업을 수행한다.
여러 요청이 들어와도 멀티스레딩환경으로 동시에 작업을 관리할 수 있다.
또한 싱글톤 패턴으로 한번 메모리에 올라간 Thread는 다시 생성할필요없이 재사용하여 메모리관리에 효율적이다.
4. 선언적 보안관리
servlet Xml파일에 보안 관리를 하기때문에 보안 이슈로 source를 수정할 일이생겨도 java 코드를 수정하여 다시 컴파일 하지 않아도 된다.

Servlet 동작과정
요청이오면 ServletRequest, ServletResponse 객체를 생성
설정 파일을 참고하여 Servelt을 Mapping
해당 Servlet인스턴스존재유무 확인후 없으면 init()메소드를 호출하여 인스턴스 생성
ServletContainer에 스레드를 생성하고 service를 실행
응답을 처리했으면 destroy() 메소드를 실행하여 ServletRequest, ServletResponse 객체 소멸

Servlet method 설명
init()
서블릿이 처음으로 요청될 때 초기화를 하는 메서드입니다. 클래스를 new 해서 사용하듯 서블릿 클래스도 초기화해주어야 사용이 가능합니다.
이렇게 초기화된 서블릿은 싱글톤으로 관리되어 다음에 한번 더 해당 서블릿 클래스를 호출하면 초기화가 다시 일어나는 것이 아니라 기존에 있던 서블릿 클래스를 호출합니다.
service()
서블릿 컨테이너가 요청을 받고 응답을 내려줄 때 필요한 서블릿의 service 메서드입니다.
Servlet interface를 구현한 HttpServlet 클래스의 doGet, doPost 같은 메서드들이 호출됩니다.
destroy()
더 이상 사용되지 않는 서블릿 클래스는 주기적으로 서블릿 컨테이너가 destory() 메서드를 호출하여 제거합니다.
이렇게 제거된 서블릿은 service 메서드들에 해당하는 모든 스레드들이 종료되거나 사용시간이 오래되어 타임아웃된 경우에는 이 클래스를 다시 사용하기 위해서는 init()을 다시 해주어야 합니다.

JavaScript
Fetch : 원격 API를 간편하게 호출할 수 있도록 브라우저에서 제공하는 fetch() 함수
fetch() 함수는 첫번째 인자로 URL, 두번째 인자로 옵션 객체를 받고, Promise 타입의 객체를 반환합니다.
반환된 객체는, API 호출이 성공했을 경우에는 응답(response) 객체를 resolve하고, 실패했을 경우에는 예외(error) 객체를 reject합니다.

JWT
클레임(Claim) 이란 : 주체가 수행할 수 있는 작업보다 주체가 무엇인지 표현하는 Key-Value 쌍
JWT의 Payload에 Claim 정보를 포함하고있다.


Go project build error
ErrorMessage :
[DEBUG]: 2022-09-06T10:06:15+09:00 - V0 | SELECT 1
time="2022-09-06T10:06:15+09:00" level=panic msg="FATAL #3D000 database \"aimath\" does not exist" built=20220906T010614Z caller=main.init.0 filename="git.mathfreeon.com/ai-math/api-server/cmd/main.go:38" version=1.1.1
panic: (*logrus.Entry) 0xc000350cb0

에러 이유 : aimath 라는 Datebase가 존재하지 않기때문에.
해결 : /cmd/.env 파일에서 DBNAME=aimath의 DBV0_ENABLED를 true에서 false로 변경


LMS-Server Login logic error
Error 현상 : 똑똑수학탐험대 서비스 로그인 시 로그인 처리되지 않은 상태로 main page로 전환.
api-server호출은 login success로 처리. but redisDB에 session 저장 안됌.
ErrorMessage :
org.springframework.web.util.NestedServletException: Handler dispatch failed; nested exception is java.lang.Error: 처리 중 오류가 발생하였습니다. 다시 시도해주세요.

해결 :
1. properties의 redis host, DB를 LMS, API server 통일(해결안됌)
2. properties의 toctoc_service, account DB url을 s.cem.io -> localhost로 변경(해결안됌)
3. doc.spring.io 검색 -> org.springframework.web.util.NestedServletException
설명 : NestedChecked/RuntimeException과 마찬가지로 메시지 및 스택 추적 측면에서 근본 원인을 적절하게 처리하는 ServletException의 하위 클래스입니다.
stacktrace란 :  응용 프로그램(Application)이 시작된 시점부터 프로그램 내에서 현재 실행 위치까지의 메서드 호출 목록
예외가 발생했을 때까지 프로그램의 위치와 진행정도를 나타내기 위해 예외가 발생하면 JVM에 의해 자동으로 생성
가장 최근의 메서드 호출이 목록에 맨 위에 있음.
stacktrace 추적 실패


